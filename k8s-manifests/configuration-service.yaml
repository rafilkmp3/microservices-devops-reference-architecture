apiVersion: v1
kind: ConfigMap
metadata:
  name: configuration-service-config
  namespace: microservices
data:
  MYSQL_HOST: "mysql"
  MYSQL_PORT: "3306"
  MYSQL_DATABASE: "microservices_db"
  MYSQL_USER: "myuser"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  PORT: "3001"
  NODE_ENV: "production"

---
apiVersion: v1
kind: Secret
metadata:
  name: configuration-service-secret
  namespace: microservices
type: Opaque
data:
  MYSQL_PASSWORD: bXlwYXNzd29yZA==  # base64 encoded "mypassword"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: configuration-service
  namespace: microservices
  labels:
    app: configuration-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: configuration-service
  template:
    metadata:
      labels:
        app: configuration-service
    spec:
      containers:
      - name: configuration-service
        image: configuration-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
        envFrom:
        - configMapRef:
            name: configuration-service-config
        env:
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configuration-service-secret
              key: MYSQL_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: configuration-service
  namespace: microservices
  labels:
    app: configuration-service
spec:
  selector:
    app: configuration-service
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: configuration-service-ingress
  namespace: microservices
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: config.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: configuration-service
            port:
              number: 3001