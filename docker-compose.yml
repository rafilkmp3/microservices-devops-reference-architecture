version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: microservices-mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: microservices_db
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Configuration Service
  configuration-service:
    build:
      context: ./configuration-service
      dockerfile: Dockerfile
    container_name: configuration-service
    environment:
      PORT: 3001
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
      MYSQL_DATABASE: microservices_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NODE_ENV: production
    ports:
      - "3001:3001"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Log Aggregator Service
  log-aggregator-service:
    build:
      context: ./log-aggregator-service
      dockerfile: Dockerfile
    container_name: log-aggregator-service
    environment:
      PORT: 3002
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
      MYSQL_DATABASE: microservices_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NODE_ENV: production
      LOG_LEVEL: info
    ports:
      - "3002:3002"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - ./log-aggregator-service/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: microservices-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - configuration-service
      - log-aggregator-service
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16